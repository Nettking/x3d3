import "psm.thingml"
import "pim.thingml"
import "io.thingml"
import "EnergySaving.thingml"
import "javatimer.thingml"
import "timestuff.thingml"

configuration X3D3_MQTT_SIM {
	instance T1:MQTTDriver
	instance pim:PIM
	instance myself:Human
	instance g_temp:TimerJava
	instance g_humn:TimerJava
	instance e_timer:TimerJava
	instance e_saving:EnergySaving
	
	
	// PSM	
	connector T1.provide_temp => pim.get_sensor
	connector T1.provide_lum_motion => e_saving.get_luminance
	
	// The luminance and motion are not handled by PIM in this model only traced
	connector T1.provide_lum_motion => myself.TTYout
		
	// HMI
	connector myself.send_cmd_temp => pim.human_input
	connector myself.send_cmd_lum_mot => T1.require_val
	connector myself.send_temp => e_saving.human_input_temp
	connector myself.send_day_night_time => e_saving.get_day_night_time
	
	// PIM outwards 
	connector pim.request_sensor => T1.require_val
	connector pim.request_actuator => T1.require_val
	//connector pim.human_output => myself.get_values
	connector pim.human_output => myself.TTYout
	
	connector pim.guard_temperature =>g_temp.timer
	connector pim.guard_human => g_humn.timer
	
	// EnergySaving
	connector e_saving.send_comfort_temp => pim.human_input
	connector e_saving.energy_timer => e_timer.timer
	connector e_saving.request_luminance_sensor => T1.require_val
	
	// TTY communication on console (see psm.thingml and io.thingml)
	connector myself.get_values over stdio
	connector myself.TTYin_temp over stdio
	connector myself.TTYin_lum_mot over stdio
	
	// Simulation
	//instance sim:Simulation
	connector T1.MQTT over MQTT // but it also works the other way 
}