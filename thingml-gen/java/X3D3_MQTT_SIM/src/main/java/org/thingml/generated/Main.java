/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;
import org.thingml.generated.network.*;
public class Main {
//Things
public static MQTTDriver MQTTDriver_T1;
public static PIM PIM_pim;
public static Human Human_myself;
public static TimerJava TimerJava_g_temp;
public static TimerJava TimerJava_e_timer;
public static EnergySaving EnergySaving_e_saving;
public static TimerJava TimerJava_g_humn;
public static void main(String args[]) {
//Things
MQTTDriver_T1 = (MQTTDriver) new MQTTDriver();
MQTTDriver_T1.buildBehavior(null, null);
MQTTDriver_T1.init();
PIM_pim = (PIM) new PIM();
PIM_pim.buildBehavior(null, null);
PIM_pim.init();
Human_myself = (Human) new Human();
Human_myself.buildBehavior(null, null);
Human_myself.init();
TimerJava_g_temp = (TimerJava) new TimerJava();
TimerJava_g_temp.buildBehavior(null, null);
TimerJava_g_temp.init();
TimerJava_e_timer = (TimerJava) new TimerJava();
TimerJava_e_timer.buildBehavior(null, null);
TimerJava_e_timer.init();
EnergySaving_e_saving = (EnergySaving) new EnergySaving();
EnergySaving_e_saving.buildBehavior(null, null);
EnergySaving_e_saving.init();
TimerJava_g_humn = (TimerJava) new TimerJava();
TimerJava_g_humn.buildBehavior(null, null);
TimerJava_g_humn.init();
//Connecting internal ports...
//Connectors
MQTTDriver_T1.getProvide_temp_port().addListener(PIM_pim.getGet_sensor_port());
Human_myself.getSend_cmd_lum_mot_port().addListener(MQTTDriver_T1.getRequire_val_port());
Human_myself.getSend_cmd_temp_port().addListener(PIM_pim.getHuman_input_port());
TimerJava_g_humn.getTimer_port().addListener(PIM_pim.getGuard_human_port());
PIM_pim.getGuard_human_port().addListener(TimerJava_g_humn.getTimer_port());
Human_myself.getSend_temp_port().addListener(EnergySaving_e_saving.getHuman_input_temp_port());
PIM_pim.getRequest_sensor_port().addListener(MQTTDriver_T1.getRequire_val_port());
PIM_pim.getHuman_output_port().addListener(Human_myself.getTTYout_port());
EnergySaving_e_saving.getSend_comfort_temp_port().addListener(PIM_pim.getHuman_input_port());
PIM_pim.getRequest_actuator_port().addListener(MQTTDriver_T1.getRequire_val_port());
MQTTDriver_T1.getProvide_lum_motion_port().addListener(EnergySaving_e_saving.getGet_luminance_port());
Human_myself.getSend_day_night_time_port().addListener(EnergySaving_e_saving.getGet_day_night_time_port());
EnergySaving_e_saving.getRequest_luminance_sensor_port().addListener(MQTTDriver_T1.getRequire_val_port());
MQTTDriver_T1.getProvide_lum_motion_port().addListener(Human_myself.getTTYout_port());
TimerJava_e_timer.getTimer_port().addListener(EnergySaving_e_saving.getEnergy_timer_port());
EnergySaving_e_saving.getEnergy_timer_port().addListener(TimerJava_e_timer.getTimer_port());
TimerJava_g_temp.getTimer_port().addListener(PIM_pim.getGuard_temperature_port());
PIM_pim.getGuard_temperature_port().addListener(TimerJava_g_temp.getTimer_port());
final int[] T1_motionsensors_array = new int[25];
final double[] T1_lightval_array = new double[25];
final int[] T1_thermometers_array = new int[25];
final double[] T1_thermoval_array = new double[25];
final String[] T1_thermotext_array = new String[25];
final int[] T1_lightsensors_array = new int[25];
final int[] T1_onoffswitches_array = new int[25];
MQTTDriver_T1.initMQTTDriver_last_mo_var((int) (0));
MQTTDriver_T1.initMQTTDriver_last_light_var((int) (0));
MQTTDriver_T1.initMQTTDriver_last_thermo_var((int) (0));
MQTTDriver_T1.initMQTTDriver_foundL_var((boolean)false);
MQTTDriver_T1.initMQTTDriver_i_var((int)0);
MQTTDriver_T1.initMQTTDriver_id_s_var((int)0);
MQTTDriver_T1.initMQTTDriver_found_var((boolean)false);
MQTTDriver_T1.initMQTTDriver_last_onoff_var((int) (0));
MQTTDriver_T1.initMQTTDriver_did_var((int)0);
MQTTDriver_T1.initMQTTDriver_motionsensors_var(T1_motionsensors_array);
MQTTDriver_T1.initMQTTDriver_lightval_var(T1_lightval_array);
MQTTDriver_T1.initMQTTDriver_thermometers_var(T1_thermometers_array);
MQTTDriver_T1.initMQTTDriver_thermoval_var(T1_thermoval_array);
MQTTDriver_T1.initMQTTDriver_thermotext_var(T1_thermotext_array);
MQTTDriver_T1.initMQTTDriver_lightsensors_var(T1_lightsensors_array);
MQTTDriver_T1.initMQTTDriver_onoffswitches_var(T1_onoffswitches_array);
PIM_pim.initPIM_tmrature_var((double) (20));
PIM_pim.initPIM_thermo_id_var((int) (1));
PIM_pim.initPIM_switch_id_var((int) (1));
PIM_pim.initPIM_delta_var((double) (0.1));
PIM_pim.initPIM_lasttemp_var((double) (0));
Human_myself.initTimeStuff_night_start_var((long) (23 * 60 * 60 * 1000));
Human_myself.initTimeStuff_night_end_var((long) (7 * 60 * 60 * 1000));
TimerJava_g_temp.initTimerJava_timer_var((java.util.Timer)null);
TimerJava_g_temp.initTimerJava_timer_task_var((java.util.TimerTask)null);
TimerJava_e_timer.initTimerJava_timer_var((java.util.Timer)null);
TimerJava_e_timer.initTimerJava_timer_task_var((java.util.TimerTask)null);
EnergySaving_e_saving.initTimeStuff_night_start_var((long) (23 * 60 * 60 * 1000));
EnergySaving_e_saving.initTimeStuff_night_end_var((long) (7 * 60 * 60 * 1000));
EnergySaving_e_saving.initEnergySaving_current_comfort_temp_var((double) (20.6));
EnergySaving_e_saving.initEnergySaving_current_luminance_var((double) (0));
EnergySaving_e_saving.initEnergySaving_light_threshold_var((double) (20));
EnergySaving_e_saving.initEnergySaving_light_off_temp_fall_var((double) (2));
EnergySaving_e_saving.initEnergySaving_night_temp_fall_var((double) (8));
TimerJava_g_humn.initTimerJava_timer_var((java.util.Timer)null);
TimerJava_g_humn.initTimerJava_timer_task_var((java.util.TimerTask)null);
//Network components for external connectors
/*$NETWORK$*/
MQTTJava null_MQTT = (MQTTJava) new MQTTJava("tcp://localhost:1883", "CPS2021/SwitchControl", "CPS2021/tempoutput").buildBehavior(null, null);

StdIOJava null_stdio = (StdIOJava) new StdIOJava().buildBehavior(null, null);

//External Connectors
/*$EXT CONNECTORS$*/
null_MQTT.getMQTT_port().addListener(MQTTDriver_T1.getMQTT_port());
MQTTDriver_T1.getMQTT_port().addListener(null_MQTT.getMQTT_port());

null_stdio.getGet_values_port().addListener(Human_myself.getGet_values_port());
Human_myself.getGet_values_port().addListener(null_stdio.getGet_values_port());

null_stdio.getTTYin_lum_mot_port().addListener(Human_myself.getTTYin_lum_mot_port());
Human_myself.getTTYin_lum_mot_port().addListener(null_stdio.getTTYin_lum_mot_port());

null_stdio.getTTYin_temp_port().addListener(Human_myself.getTTYin_temp_port());
Human_myself.getTTYin_temp_port().addListener(null_stdio.getTTYin_temp_port());

/*$START$*/
null_MQTT.init().start();

null_stdio.init().start();

TimerJava_g_humn.start();
TimerJava_e_timer.start();
EnergySaving_e_saving.start();
Human_myself.start();
TimerJava_g_temp.start();
PIM_pim.start();
MQTTDriver_T1.start();
//Hook to stop instances following client/server dependencies (clients firsts)
Runtime.getRuntime().addShutdownHook(new Thread() {
public void run() {
MQTTDriver_T1.stop();
PIM_pim.stop();
TimerJava_g_temp.stop();
Human_myself.stop();
EnergySaving_e_saving.stop();
TimerJava_e_timer.stop();
TimerJava_g_humn.stop();
/*$STOP$*/
null_MQTT.stop();

null_stdio.stop();

}
});

}
}
